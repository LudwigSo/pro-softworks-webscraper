// <auto-generated />
using System;
using Driven.Persistence.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Driven.Persistence.Postgres.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240919215810_AddSeedDataForTagsAndKeywords")]
    partial class AddSeedDataForTagsAndKeywords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Keyword", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagId = 1,
                            Value = "c#"
                        },
                        new
                        {
                            Id = 2,
                            TagId = 1,
                            Value = "csharp"
                        },
                        new
                        {
                            Id = 3,
                            TagId = 1,
                            Value = "c-sharp"
                        },
                        new
                        {
                            Id = 4,
                            TagId = 1,
                            Value = "aspnet"
                        },
                        new
                        {
                            Id = 5,
                            TagId = 1,
                            Value = "dotnet"
                        },
                        new
                        {
                            Id = 6,
                            TagId = 2,
                            Value = "ddd"
                        },
                        new
                        {
                            Id = 7,
                            TagId = 2,
                            Value = "domaindrivendesign"
                        },
                        new
                        {
                            Id = 8,
                            TagId = 2,
                            Value = "domain-driven-design"
                        },
                        new
                        {
                            Id = 9,
                            TagId = 2,
                            Value = "eric evans"
                        },
                        new
                        {
                            Id = 10,
                            TagId = 2,
                            Value = "ericevans"
                        },
                        new
                        {
                            Id = 11,
                            TagId = 2,
                            Value = "eric-evans"
                        },
                        new
                        {
                            Id = 12,
                            TagId = 2,
                            Value = "portsandadapters"
                        },
                        new
                        {
                            Id = 13,
                            TagId = 2,
                            Value = "ports&adapters"
                        },
                        new
                        {
                            Id = 14,
                            TagId = 2,
                            Value = "ports-and-adapters"
                        },
                        new
                        {
                            Id = 15,
                            TagId = 2,
                            Value = "hexagonal"
                        },
                        new
                        {
                            Id = 16,
                            TagId = 2,
                            Value = "clean"
                        },
                        new
                        {
                            Id = 17,
                            TagId = 2,
                            Value = "layered"
                        },
                        new
                        {
                            Id = 18,
                            TagId = 3,
                            Value = "vuejs"
                        },
                        new
                        {
                            Id = 19,
                            TagId = 3,
                            Value = "vue.js"
                        },
                        new
                        {
                            Id = 20,
                            TagId = 3,
                            Value = "vuetify"
                        },
                        new
                        {
                            Id = 21,
                            TagId = 3,
                            Value = "javascript"
                        },
                        new
                        {
                            Id = 22,
                            TagId = 3,
                            Value = "typscript"
                        },
                        new
                        {
                            Id = 23,
                            TagId = 3,
                            Value = "figma"
                        });
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("FirstSeenAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("JobLocation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("PlannedStart")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProjectIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Architecture"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UI"
                        });
                });

            modelBuilder.Entity("Project_Tag", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Project_Tag");
                });

            modelBuilder.Entity("Domain.Keyword", b =>
                {
                    b.HasOne("Domain.Tag", null)
                        .WithMany("Keywords")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_Tag", b =>
                {
                    b.HasOne("Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Navigation("Keywords");
                });
#pragma warning restore 612, 618
        }
    }
}
